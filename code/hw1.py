# -*- coding: utf-8 -*-
"""hw1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TiYZts8uCJDU-IrW9QNOkRrwGTy6fQnV

Imports
"""

import pandas as pd
import random
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import *
from sklearn.naive_bayes import *
from sklearn.metrics import confusion_matrix, classification_report, plot_confusion_matrix, accuracy_score
from sklearn import svm, tree
from sklearn.model_selection import KFold,cross_val_score
import time
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from scipy.sparse import csr_matrix, hstack

"""Opening Json Processed Dataset"""

dataset = pd.read_json("drive/My Drive/ML/HW1/processed_dataset.json",lines=True)

"""Count Vectorizer: fitted with the instructions"""

vectorizer = CountVectorizer(min_df=0.005) # multinomial

X1= vectorizer.fit_transform(dataset['instructions'])
y_all = dataset['semantic']

"""Adding control flow graph features"""

columns=vectorizer.get_feature_names()

#adding number of edges
edges=dataset['edges']
l=len(edges)
rows=np.arange(0,l)
cols=np.full((l), 0, dtype=int)
X2=csr_matrix((edges, (rows, cols)),shape=(l, 1)).toarray()
X_tmp2=hstack((X1,X2))
columns.append('edges')

#adding cycles(true/false)
cycles=dataset['cycles']
X3=csr_matrix((cycles, (rows, cols)),shape=(l, 1)).toarray()
X_tmp=hstack((X_tmp2,X3))
columns.append('has_cycles')


#adding cyclomatic complexity
cyclo=dataset['cyclomatic']
X4=csr_matrix((cyclo, (rows, cols)),shape=(l, 1)).toarray()
X_all=hstack((X_tmp,X4))
columns.append('cyclomatic_c')

print(X_all.shape)
print(pd.DataFrame(X_all.A[0:10], columns=columns).to_string())

"""Split Data"""

X_train, X_test, y_train, y_test = train_test_split(X_all, y_all, 
          test_size=0.3, random_state=15)

print("Train: %d - Test: %d" %(X_train.shape[0],X_test.shape[0]))

"""Choose a Model"""

model_type = "SVM" 

if model_type == "bernoulli":
  start=time.time()
  model = BernoulliNB().fit(X_train, y_train)
  t=time.time()-start
  print("training running time: "+str(t)+" sec")

elif model_type == "multinomial":
  start=time.time()
  model = MultinomialNB().fit(X_train, y_train)
  t=time.time()-start
  print("training running time: "+str(t)+" sec")

elif model_type == "SVM":
  start=time.time()
  model = svm.SVC(kernel = 'linear', C=1).fit(X_train, y_train)
  t=time.time()-start
  print("training running time: "+str(t)+" sec")

"""Evaluate the chosen model"""

y_pred = model.predict(X_test)
cm=confusion_matrix(y_test, y_pred)
print(cm)
print(classification_report(y_test, y_pred))
print("accuracy_score: "+str(accuracy_score(y_test,y_pred, normalize=True)))

"""Plot the confusion Matrix"""

plot_confusion_matrix(model,X_test, y_test,values_format='d',cmap=plt.cm.YlGn)

"""5-Fold Cross Validation"""

#cv = ShuffleSplit(n_splits=5, test_size=0.333, random_state=15)
cv = KFold(n_splits=10)
model=svm.SVC(kernel = 'linear', C=1)
#model=MultinomialNB()
scores = cross_val_score(model, X_all, y_all, cv=cv)

print(scores)
a_scores = pd.DataFrame(scores,columns=['Cross Val Score'])
sns.set(style="white", rc={"lines.linewidth": 3})
sns.barplot(x=['fold0','fold1','fold2','fold3','fold4','fold5','fold6','fold7','fold8','fold9'],y="Cross Val Score",data=a_scores)
plt.show()
sns.set()