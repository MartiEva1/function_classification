# -*- coding: utf-8 -*-
"""blind_preprocessing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_CTmViQDmUwdjZPt45OCF6xDxKIaezWb

Pip install
"""

pip install momepy

"""Imports"""

import networkx as nx
import momepy as mm
import json
from networkx.readwrite import json_graph

"""Preprocessing"""

arithmetic=["add","sub","inc","dec","div","mul"]
shift=["sal","shl","sar","shr","psl","psr"]
four=["cmov","idiv","imul","pxor","punp","padd","pand","psub","pand"]

def decide_class(str):
  if(str[0:3]=="mov"):
    if(len(str)>4):
      if(str[3]!="s" and str[3]!="z"):
        return str[0:3]
      else:
        return str[0:4]
    else:
      return str[0:3]
  elif(str[0:3]=="cvt" or str[-2:]=="pd" or str[-2:]=="sd"):
    return "float"
  elif(str[0:3]in arithmetic):
    #return "math"
    return str[0:3]
  elif(str[0:3]in shift):
    return "shift"
  elif(str[0:3]=="and"):
    return "and"
  elif(str[0:3]=="cmp" or str[0:4]=="pcmp"):
    return "cmp"
  elif(str[0]=='j'):
    if(str[0:3]!='jmp'):
      return "jumpc"
    else:
      return str[0:3]
  elif(str[0:4] in four):
    return str[0:4]
  elif(str[0:4]=="cmov"):
    return str[0:4]
  elif(str[0:3]=="xor"):
    return "xor"
  elif(str[0:3]=="set"):
    return str[0:3]
  elif(str[0]=='f' and len(str)>=3):
    #this is an assumpion (FPU)
    return "float"
  return str

file=open("drive/My Drive/ML/HW1/blindtest.json","r")
newfile=open("drive/My Drive/ML/HW1/processed_blindtest.json","w")

for line in file:
  json_data = json.loads(line)
  string=""
  list=json_data['lista_asm']
  cfg=json_data['cfg']
  graph = json_graph.adjacency_graph(cfg)
  #nx.draw(graph)
  #print(nx.info(graph))
  edges=nx.number_of_edges(graph)
  nodes=nx.number_of_nodes(graph)
  has_cycles=1
  try: nx.algorithms.cycles.find_cycle(graph)
  except: has_cycles=0
  cyclo_complexity=mm.cyclomatic(graph,radius=None)
  flag=False
  for instruction in list.split("'"):
    if(flag==False):
      flag=True
      continue
    elif(flag==True):
      flag=False
    inst_list=instruction.split(" ")
    inst=""
    l=len(inst_list)
    if(l>1):
      inst=inst_list[0]
      if(inst!=""):
        string=string+"'"+decide_class(inst)+"',"
      if(inst_list[1][:3]=="xmm"):
        inst=inst_list[1][:3]
        string=string+"'"+inst+"',"
      if(inst_list[1][:4]=="byte"):
        string=string+"'"+"byte"+"',"
      if(inst_list[1][:5]=="dword" or inst_list[1][:5]=="qword"):
        string=string+"'"+inst_list[1][:5]+"',"
    if(l>2 and inst_list[2][:4]=="byte"):
      string=string+"'"+"byte"+"',"
    else:
      inst=inst_list[0]
      if(inst!=""):
        string=string+"'"+decide_class(inst)+"',"

  finalstr='{"id": '+'"'+json_data['id']+'", '+'"edges": "'+str(edges)+'", '+'"cycles": "'+str(has_cycles)+'", '+'"cyclomatic": "'+str(cyclo_complexity)+'", '+'"instructions": "['+string[0:-1]+']"}'
  newfile.write(finalstr+'\n')
file.close()
newfile.close()

print("processed dataset saved in processed_blindtest.json !")